From 29a2d9d8b9b2e040e3939d061e3f8b640b7a1a37 Mon Sep 17 00:00:00 2001
From: lunarsourcellc <lunarsourcellc@gmail.com>
Date: Fri, 15 May 2020 09:09:53 -0400
Subject: [PATCH 22/22] Mouse Scroll Update

---
 .../Gwen/Control/Base.cs                      | 22 +++++++++++
 .../Gwen/Control/Canvas.cs                    | 14 +++++++
 .../Gwen/Control/ScrollControl.cs             | 21 +++++++++++
 .../Gwen/Input/InputHandler.cs                | 37 +++++++++++++++++--
 .../Gwen/Input/IntersectInput.cs              |  3 ++
 Intersect.Client/MonoGame/Input/MonoInput.cs  | 23 ++++++++++++
 6 files changed, 116 insertions(+), 4 deletions(-)

diff --git a/Intersect.Client.Framework/Gwen/Control/Base.cs b/Intersect.Client.Framework/Gwen/Control/Base.cs
index 53ed8199..7120abd2 100644
--- a/Intersect.Client.Framework/Gwen/Control/Base.cs
+++ b/Intersect.Client.Framework/Gwen/Control/Base.cs
@@ -1969,6 +1969,28 @@ internal bool InputMouseWheeled(int delta)
             return OnMouseWheeled(delta);
         }
 
+        /// <summary>
+        ///     Handler invoked on mouse wheel event.
+        /// </summary>
+        /// <param name="delta">Scroll delta.</param>
+        protected virtual bool OnMouseHWheeled(int delta)
+        {
+            if (mActualParent != null)
+            {
+                return mActualParent.OnMouseHWheeled(delta);
+            }
+
+            return false;
+        }
+
+        /// <summary>
+        ///     Invokes mouse wheeled event (used by input system).
+        /// </summary>
+        internal bool InputMouseHWheeled(int delta)
+        {
+            return OnMouseHWheeled(delta);
+        }
+
         /// <summary>
         ///     Handler invoked on mouse moved event.
         /// </summary>
diff --git a/Intersect.Client.Framework/Gwen/Control/Canvas.cs b/Intersect.Client.Framework/Gwen/Control/Canvas.cs
index b0b33bd3..325e2191 100644
--- a/Intersect.Client.Framework/Gwen/Control/Canvas.cs
+++ b/Intersect.Client.Framework/Gwen/Control/Canvas.cs
@@ -292,6 +292,20 @@ public bool Input_MouseButton(int button, bool down)
             return InputHandler.OnMouseClicked(this, button, down);
         }
 
+        /// <summary>
+        ///     Handles mouse button events. Called from Input subsystems.
+        /// </summary>
+        /// <returns>True if handled.</returns>
+        public bool Input_MouseScroll(int deltaX, int deltaY)
+        {
+            if (IsHidden)
+            {
+                return false;
+            }
+
+            return InputHandler.OnMouseScroll(this, deltaX, deltaY);
+        }
+
         /// <summary>
         ///     Handles keyboard events. Called from Input subsystems.
         /// </summary>
diff --git a/Intersect.Client.Framework/Gwen/Control/ScrollControl.cs b/Intersect.Client.Framework/Gwen/Control/ScrollControl.cs
index fb684e29..718c1f95 100644
--- a/Intersect.Client.Framework/Gwen/Control/ScrollControl.cs
+++ b/Intersect.Client.Framework/Gwen/Control/ScrollControl.cs
@@ -247,6 +247,27 @@ protected override bool OnMouseWheeled(int delta)
             return false;
         }
 
+        /// <summary>
+        ///     Handler invoked on mouse wheel event.
+        /// </summary>
+        /// <param name="delta">Scroll delta.</param>
+        /// <returns></returns>
+        protected override bool OnMouseHWheeled(int delta)
+        {
+
+            if (CanScrollH && mHorizontalScrollBar.IsVisible)
+            {
+                if (mHorizontalScrollBar.SetScrollAmount(
+                    mHorizontalScrollBar.ScrollAmount - mHorizontalScrollBar.NudgeAmount * (delta / 60.0f), true
+                ))
+                {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+
         /// <summary>
         ///     Renders the control using specified skin.
         /// </summary>
diff --git a/Intersect.Client.Framework/Gwen/Input/InputHandler.cs b/Intersect.Client.Framework/Gwen/Input/InputHandler.cs
index 278b97c3..cb251449 100644
--- a/Intersect.Client.Framework/Gwen/Input/InputHandler.cs
+++ b/Intersect.Client.Framework/Gwen/Input/InputHandler.cs
@@ -2,6 +2,7 @@
 using System.Text;
 
 using Intersect.Client.Framework.Gwen.Control;
+using Intersect.Client.Framework.Gwen.ControlInternal;
 using Intersect.Client.Framework.Gwen.DragDrop;
 
 namespace Intersect.Client.Framework.Gwen.Input
@@ -395,13 +396,41 @@ public static bool OnMouseClicked(Base canvas, int mouseButton, bool down)
         }
 
         /// <summary>
-        ///     Key handler.
+        ///     Mouse click handler.
         /// </summary>
         /// <param name="canvas">Canvas.</param>
-        /// <param name="key">Key.</param>
-        /// <param name="down">True if the key is down.</param>
+        /// <param name="mouseButton">Mouse button number.</param>
+        /// <param name="down">Specifies if the button is down.</param>
         /// <returns>True if handled.</returns>
-        public static bool OnKeyEvent(Base canvas, Key key, bool down)
+        public static bool OnMouseScroll(Base canvas, int deltaX, int deltaY)
+        {
+
+            if (canvas == null)
+                return false;
+
+            if (HoveredControl.GetCanvas() != canvas)
+                return false;
+
+            if (!canvas.IsVisible)
+                return false;
+
+            if (deltaY != 0)
+                HoveredControl.InputMouseWheeled(deltaY);
+
+            if (deltaX != 0)
+                HoveredControl.InputMouseHWheeled(deltaX);
+
+            return true;
+        }
+
+            /// <summary>
+            ///     Key handler.
+            /// </summary>
+            /// <param name="canvas">Canvas.</param>
+            /// <param name="key">Key.</param>
+            /// <param name="down">True if the key is down.</param>
+            /// <returns>True if handled.</returns>
+            public static bool OnKeyEvent(Base canvas, Key key, bool down)
         {
             if (null == KeyboardFocus)
             {
diff --git a/Intersect.Client.Framework/Gwen/Input/IntersectInput.cs b/Intersect.Client.Framework/Gwen/Input/IntersectInput.cs
index a8699f75..ee40c914 100644
--- a/Intersect.Client.Framework/Gwen/Input/IntersectInput.cs
+++ b/Intersect.Client.Framework/Gwen/Input/IntersectInput.cs
@@ -24,6 +24,7 @@ public enum InputEvent
 
             TextEntered,
 
+            MouseScroll,
         }
 
         private Canvas mCanvas;
@@ -133,6 +134,8 @@ public override bool ProcessMessage(object message)
                     key = TranslateKeyCode(msg.Key);
 
                     return mCanvas.Input_Key(key, false); //TODO FIX THIS LAST PARAMETER
+                case InputEvent.MouseScroll:
+                    return mCanvas.Input_MouseScroll((int)msg.MousePosition.X, (int)msg.MousePosition.Y);
                 default:
                     throw new ArgumentOutOfRangeException();
             }
diff --git a/Intersect.Client/MonoGame/Input/MonoInput.cs b/Intersect.Client/MonoGame/Input/MonoInput.cs
index 07e6ad07..45c4654d 100644
--- a/Intersect.Client/MonoGame/Input/MonoInput.cs
+++ b/Intersect.Client/MonoGame/Input/MonoInput.cs
@@ -30,6 +30,10 @@ public class MonoInput : GameInput
 
         private int mMouseY;
 
+        private int mMouseVScroll;
+
+        private int mMouseHScroll;
+
         private Game mMyGame;
 
         public MonoInput(Game myGame)
@@ -159,6 +163,23 @@ private void CheckMouseButton(ButtonState bs, MouseButtons mb)
             }
         }
 
+        private void CheckMouseScrollWheel(int scrlVValue, int scrlHValue)
+        {
+            Pointf p = new Pointf(0, 0);
+
+            if (scrlVValue != mMouseVScroll || scrlHValue != mMouseHScroll)
+            {
+                p = new Pointf(scrlHValue - mMouseHScroll, scrlVValue - mMouseVScroll);
+
+                Interface.Interface.GwenInput.ProcessMessage(
+                    new GwenInputMessage(IntersectInput.InputEvent.MouseScroll, p, (int)MouseButtons.Middle, Keys.Alt)
+                );
+
+                mMouseVScroll = scrlVValue;
+                mMouseHScroll = scrlHValue;
+            }
+        }
+
         public override void Update()
         {
             if (mMyGame.IsActive)
@@ -182,6 +203,8 @@ public override void Update()
                 CheckMouseButton(state.RightButton, MouseButtons.Right);
                 CheckMouseButton(state.MiddleButton, MouseButtons.Middle);
 
+                CheckMouseScrollWheel(state.ScrollWheelValue, state.HorizontalScrollWheelValue);
+
                 foreach (var key in mKeyDictionary)
                 {
                     if (kbState.IsKeyDown(key.Value) && !mLastKeyboardState.IsKeyDown(key.Value))
-- 
2.17.1.windows.2

